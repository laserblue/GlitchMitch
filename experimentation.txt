     // Load a map from a 2D array of the Field Soil tile indices (7 rows x 6 columns)
      var level = [
        [ 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38],
        [ 38, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 23, 23, 23, 23, 23, 1, 1, 1, 2, 38],
        [ 38, 3, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 5, 38],
        [ 38, 3, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 5, 38],
        [ 38, 3, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 5, 38],
        [ 38, 3, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 5, 38],
        [ 38, 21, 25, 25, 18, 18, 18, 18, 25, 25, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 12, 13, 22, 38],
        [ 38, 21, 20, 20, 17, 17, 17, 17, 20, 0, 1, 2, 3, 4, 5, 20, 20, 20, 9, 10, 11, 14, 16, 22, 38],
        [ 38, 21, 20, 20, 17, 17, 17, 17, 20, 6, 7, 8, 9, 10, 11, 20, 20, 20, 20, 20, 20, 20, 20, 22, 38],
        [ 38, 21, 20, 20, 17, 17, 17, 17, 20, 12, 13, 14, 15, 16, 17, 20, 15, 12, 13, 20, 20, 20, 20, 22, 38],
        [ 38, 21, 20, 20, 17, 17, 17, 17, 20, 18, 19, 20, 21, 22, 23, 20, 16, 11, 14, 20, 20, 20, 20, 22, 38],
        [ 38, 21, 41, 26, 19, 19, 19, 19, 26, 24, 25, 26, 27, 28, 29, 26, 26, 26, 26, 26, 26, 26, 41, 22, 38],
        [ 38, 21, 25, 25, 18, 18, 18, 18, 25, 30, 31, 32, 33, 34, 35, 25, 25, 25, 25, 25, 25, 25, 25, 22, 38],
        [ 38, 21, 20, 20, 17, 17, 17, 17, 20, 36, 37, 38, 39, 40, 41, 20, 20, 20, 20, 20, 20, 20, 20, 22, 38],
        [ 38, 21, 20, 20, 17, 17, 17, 17, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 22, 38],
        [ 38, 21, 41, 26, 19, 19, 19, 19, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 41, 22, 38],
        [ 38, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 24, 24, 24, 24, 24, 24, 24, 24, 8, 38],       
        [ 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38]
     ];


// Load a map from a 2D array of the plowed soil tile indices
      var level = [
        [ 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8],
        [ 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11],
        [ 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11],
        [ 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11],
        [ 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11],
        [ 9, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 11],
        [ 9, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 11],
        [ 9, 15, 15, 15, 15, 15, 15, 15, 15, 0, 1, 2, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 11],
        [ 9, 15, 15, 15, 15, 15, 15, 15, 15, 3, 4, 5, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 11],
        [ 9, 15, 15, 15, 15, 15, 15, 15, 15, 6, 7, 8, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 11],
        [ 9, 15, 15, 15, 15, 15, 15, 15, 15, 9, 10, 11, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 11],
        [ 9, 15, 15, 15, 15, 15, 15, 15, 15, 12, 13, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 11],
        [ 9, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 17, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 11],
        [ 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11],
        [ 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11],
        [ 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11],
        [ 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11],       
        [ 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14]
     ];
-------
Creating zones - https://gamedevacademy.org/how-to-create-a-turn-based-rpg-game-in-phaser-3-part-1/


Working with tilemaps to create a top-down RPG
https://phaser.io/news/2018/07/modular-game-worlds-in-phaser-3
https://medium.com/@michaelwesthadley/modular-game-worlds-in-phaser-3-tilemaps-1-958fc7e6bbd6
https://phaser.io/news/2017/04/phaser-quest
https://github.com/Jerenaux/phaserquest

Changing a scene on entering a doorway or arriving at a specified location
https://www.html5gamedevs.com/topic/41934-how-do-i-get-a-character-to-enter-a-building/
https://itnext.io/modular-game-worlds-in-phaser-3-tilemaps-3-procedural-dungeon-3bc19b841cd
https://github.com/konato-debug/pokemon-phaser

Collisions and Zones
https://phaser.io/examples/v3/view/physics/arcade/collision-direction





TEXT Experimentation

Regular Text, Static Bitmap Text, Dynamic Bitmap Text

Regular Text
this.add.text(160, 0, 'Click on screen to see a new scene',  {fontFamily: 'Arial', fontSize: 32, color: '#00ffff' });

this.add.text(200, 500, 'Splash Screen', { fontFamily: 'Helvetica', fontSize: 64, color: '#0000ff' });

this.add.text(30, 380, 'Phaser').setFontFamily('Arial').setFontSize(64).setColor('#00ff00').setBackgroundColor('#ffff00').setPadding(16).setAlpha(0.5);

this.add.text(20, 20, 'Menu Screen\n Start Game\nOptions\nCredits', { fontFamily: 'Arial', fontSize: 64, color: '#ffff00' });
 


this.add.text(160, 0, 'Click on screen to see a new scene',  {fontFamily: 'Arial', fontSize: 32, color: '#00ffff' }).setStroke('#000000', 4);

var text10 = this.add.text(150, 20, 'Phaser 3', { fontFamily: 'Arial', fontSize: 128, color: '#00ff00' }).setAlpha(0.6);
text10.setStroke('#000000', 6);


 //  https://github.com/kmajic/phaser3template/blob/master/js/menu.js     
        var mainMenu = [];
        mainMenu.bg = this.add.graphics();
	      mainMenu.bg.fillStyle(0xff0000, 0.6);// (color, alpha value (0-1))
        
	      mainMenu.bg.fillRect(100, 300, 400, 200);
      	mainMenu.txt = [];
// style variation -      mainMenu.txt[0] = this.add.text(100, 300, "Play", {fontFamily: "Courier", fontSize: "48px", fill: "#fff",  });
        mainMenu.txt[0] = this.add.text(100, 300, "Play", {fontFamily: "Times New Roman", fontSize: 48, color: "#ffffff",  });
	      mainMenu.txt[0].setStroke('0x0000ff', 4);
  //      mainMenu.txt[0].setInteractive();       // this is required for any text that will be interactive/clickable
        mainMenu.txt[1] = this.add.text(100, mainMenu.txt[0].y + 60, "Settings", {fontFamily: 'Verdana', fontSize: 48, color: "#0000ff"});
        mainMenu.txt[1].setStroke('0x111111', 2);
        mainMenu.txt[2] = this.add.text(100, mainMenu.txt[1].y + 75, "Extra", {fontFamily: 'Arial Black', fontSize: 64, color: "#ffff00"});
        mainMenu.txt[2].setStroke('0x111111', 6);



//        var text1 = this.add.text(20, 50, "Click screen to see a new scene (7 scenes)", { fontFamily: "Arial Black", fontSize: 74, color: "#c51b7d" });
//       text1.setStroke('#de77ae', 16);
 
    //  Apply the shadow to the Stroke only
 //   text1.setShadow(2, 2, '#333333', 2, true, false);

 //   var text2 = this.add.text(20, 180, "Shadow Fill", { fontFamily: "Arial Black", fontSize: 74, color: "#c51b7d" });
 //   text2.setStroke('#de77ae', 16);

    //  Apply the shadow to the Fill only
 //   text2.setShadow(2, 2, "#333333", 2, false, true);

 //   var text3 = this.add.text(20, 310, "Shadow Both", { fontFamily: "Arial Black", fontSize: 74, color: "#c51b7d" });
 //   text3.setStroke('#de77ae', 16);
    //  Apply the shadow to the Stroke and the Fill (this is the default)
 //   text3.setShadow(2, 2, "#333333", 2, true, true);

        var text4 = this.add.text(20, 500, "Click screens to see new scenes (5 more)", { fontFamily: "Arial Black", fontSize: 32, color: "#006600" });
        text4.setStroke('#ffffff', 8);
    //  Apply the shadow to neither stroke nor fill, if you don't need a shadow then don't call setShadow at all :)
        text4.setShadow(2, 2, "#333333", 2, false, false);

Scrolling vertical text
https://phaser.io/examples/v3/view/game-objects/bitmaptext/dynamic/vertical-scroller

https://phaser.io/examples/v3/view/input/dragging/scrolling-text-box

scrolling retro text
https://phaser.io/examples/v3/view/game-objects/bitmaptext/retro-font/retro-text-scroll


How to Create A Phaser 3 Text Style Library
https://phasergames.com/creating-a-phaser-3-text-style-library/?mc_cid=b17f09fbb9&mc_eid=a4d9ee0291

Interactive Text




-------------------------------------------------------------------------------------------------------------------------------------

// Variations On Shadows     
//        var text1 = this.add.text(20, 50, "Click screen to see a new scene (7 scenes)", { fontFamily: "Arial Black", fontSize: 74, color: "#c51b7d" });
//       text1.setStroke('#de77ae', 16);
 
    //  Apply the shadow to the Stroke only
 //   text1.setShadow(2, 2, '#333333', 2, true, false);

 //   var text2 = this.add.text(20, 180, "Shadow Fill", { fontFamily: "Arial Black", fontSize: 74, color: "#c51b7d" });
 //   text2.setStroke('#de77ae', 16);

    //  Apply the shadow to the Fill only
 //   text2.setShadow(2, 2, "#333333", 2, false, true);
//
      // Apply the shadow to both stroke and fill
 //   var text3 = this.add.text(20, 310, "Shadow Both", { fontFamily: "Arial Black", fontSize: 74, color: "#c51b7d" });
 //   text3.setStroke('#de77ae', 16);
    //  Apply the shadow to the Stroke and the Fill (this is the default)
 //   text3.setShadow(2, 2, "#333333", 2, true, true);
 
 =======================
 /*      
 //   show scrollable csv map 
    var map = this.make.tilemap({ key: 'map', tileWidth: 32, tileHeight: 32 });
    var tileset = map.addTilesetImage('tiles');
    var layer = map.createStaticLayer(0, tileset, 0, 0); // layer index, tileset, x, y

    this.cameras.main.setBounds(0, 0, map.widthInPixels, map.heightInPixels);

    var cursors = this.input.keyboard.createCursorKeys();

    var controlConfig = {
        camera: this.cameras.main,
        left: cursors.left,
        right: cursors.right,
        up: cursors.up,
        down: cursors.down,
        speed: 0.5
    };

    controls = new Phaser.Cameras.Controls.FixedKeyControl(controlConfig);// controls not defined

    var help = this.add.text(16, 16, 'Arrow keys to scroll', {
        fontSize: '18px',
        fill: '#ffffff'
    });

    help.setScrollFactor(0);

    var gui = new dat.GUI(); // dat not defined

    var cam = this.cameras.main;

    cam.setBounds(0, 0, 4096, 4096);

    gui.addFolder('Camera');
    gui.add(cam, 'dirty').listen();
    gui.add(cam.midPoint, 'x').listen();
    gui.add(cam.midPoint, 'y').listen();
    gui.add(cam, 'scrollX').listen();
    gui.add(cam, 'scrollY').listen();
*/      

/* put in experimental notes as snippet when able to cut      
        var txt4 = this.add.text(500, 500, 'SceneMain', {fontFamily: "Times New Roman", fontSize: 48, color: "#ffffff",  });;
        //Let txt1 object interactively
        //pointerdown feature with mouse click
        txt4.setInteractive().on('pointerdown', function() {
            //Let's start another scene with start
            this.scene.scene.start('sceneMain');
        });
*/
      
      
// https://snowbillr.github.io/blog//2018-07-03-buttons-in-phaser-3/
 /*
//        let clickCount = 0;
 //       this.clickCountText = this.add.text(100, 200, '');
 //       const clickButton = this.add.text(50, 100, 'Click me!', { fill: '#000' }).setInteractive()
  //        .on('pointerdown', function() { 
 //       this.updateClickCountText(++clickCount) );
          },

 //       this.updateClickCountText(clickCount);
//    

  //  updateClickCountText(clickCount) {
 //     this.clickCountText.setText(`Button has been clicked ${clickCount} times.`);
//    }  
  */    
      
      //  https://github.com/kmajic/phaser3template/blob/master/js/menu.js     
/*
        var mainMenu = [];
        mainMenu.bg = this.add.graphics();
	      mainMenu.bg.fillStyle(0xff0000, 0.6);// (color, alpha value (0-1))
        
	      mainMenu.bg.fillRect(100, 300, 400, 200);
      	mainMenu.txt = [];
// style variation -      mainMenu.txt[0] = this.add.text(100, 300, "Play", {fontFamily: "Courier", fontSize: "48px", fill: "#fff",  });
        mainMenu.txt[0] = this.add.text(100, 300, "Play", {fontFamily: "Times New Roman", fontSize: 48, color: "#ffffff",  });
	      mainMenu.txt[0].setStroke('0x0000ff', 4);
  //      mainMenu.txt[0].setInteractive();       // this is required for any text that will be interactive/clickable
        mainMenu.txt[1] = this.add.text(100, mainMenu.txt[0].y + 60, "Settings", {fontFamily: 'Verdana', fontSize: 48, color: "#0000ff"});
        mainMenu.txt[1].setStroke('0x111111', 2);
        mainMenu.txt[2] = this.add.text(100, mainMenu.txt[1].y + 75, "Extra", {fontFamily: 'Arial Black', fontSize: 64, color: "#ffff00"});
        mainMenu.txt[2].setStroke('0x111111', 6);
*/
      
      /* doesn't work for mainMenu.text[0]
        mainMenu.text[0].setInteractive().on('pointerdown', function() {
            //Let's start another scene with start
            this.scene.scene.start('optionsScene');
        });
*/      
/* put in experimental snippets collection      
        var text4 = this.add.text(20, 550, "Click words to see new scenes (6 more)", { fontFamily: "Arial Black", fontSize: 32, color: "#006600" });
        text4.setStroke('#ffffff', 8);
    //  Apply the shadow to neither stroke nor fill, if you don't need a shadow then don't call setShadow at all :)
        text4.setShadow(2, 2, "#333333", 2, false, false);
  */   
  ===================
  // Tap or click on image/screen vs tapor click on interactive text
  /*   // this.input.once vs. nextScene.setInteractive().on('pointerdown', function() {  
        this.input.once('pointerdown', function () {
            console.log('From SceneMain to FSMScene');
            this.scene.start('fsmScene');
        }, this);
 */   // this.scene.scene.start('optionsScene'); vs. this.scene.start('fsmScene');
//        }, this);

 /*    //     this.add.text(20, 460, 'Click or tap on this image to see another game scene', {fontFamily: 'Arial', fontSize: 32, color: '#fffff00'});        
      // On tap or click, stop music and change scene
        this.input.once('pointerdown', function() {
            music.stop();
            console.log('From GameScene to SceneMain');
            this.scene.start('sceneMain');
        }, this);
  */
  /*
        this.input.once('pointerdown', function () {
            this.scene.start('menuScene'); // this.scene.start('titleScene'); // trying to get TitleScene to run
        }, this);
      */
      
      ===================================================
      // game.scene.add('TitleScene', titleScene);

//scene: [ BootScene, TitleScene ] 
//scene: [ BootScene, MenuScene, OptionsScene, GameScene, FSMScene, GameOverScene, CreditsScene ] 



// this.scene.start("myScene2");



/*
var image;

function preload() {
      this.load.image('splashScreen', 'https://cdn.glitch.com/dad6f70b-d7f8-4b6b-812a-427943582a20%2Flossy-page1-800px-NRCSOH07012_-_Ohio_(717402)(NRCS_Photo_Gallery).tif.jpg?v=1574372053041');
    }
    
function create() {
      
      image = this.add.image(400, 300, 'splashScreen').setScale(1);
  // set.Origin(0.5);
  
    //  Default text with no style settings
    this.add.text(200, 40, 'Phaser', { fontFamily: 'Arial', fontSize: 128, color: '#ffffff' });

    //  Pass in a basic style object with the constructor
    this.add.text(100, 200, 'Phaser', { fontFamily: 'Arial', fontSize: 64, color: '#0000ff' });

    //  Or chain calls like this:
    this.add.text(100, 400, 'Phaser').setFontFamily('Arial').setFontSize(64).setColor('#00ff00');
 
 
 
 
 //    this.scene.start("SceneMain");
    }
    
function update() {

    }

var game = new Phaser.Game(config);// client-side js 
// variation: window.game = new Phaser.Game(config);
// window.onload function() // above config - a coding variation not usually seen

//game.scene.add('TitleScene', titleScene);
//game.scene.start('TitleScene');  
  
// developers keep adding more and more complications
// typescript, server, scenes, webpack, constants object, es6 
// https://www.youtube.com/watch?v=KZpbt2jccjE - es6 scene
// https://www.youtube.com/watch?v=KRu3raWs5Hs -es6 import, export

// client-side js
// this will be js/main.js for Phaser 3
// ES6 has import lines at top
// Phaser 3 replaces use of game states with scenes



/*
{
   var config {
     type: Phaser.AUTO,
     width: 480,
     height: 640,
     parent: phaser-game // div-tag-name
     scene: [SceneMain]
   };
}

*/


// run by the browser each time your view template referencing it is loaded

console.log("hello world :o");



// RPG Code - Phaser 3 

/* global Phaser */
// FSM player animation states are not game states (??)
// I need to figure out how to connect to and add my old Phaser 2 game state files e.g. main.js -> /Splash.js
// saw an example project (marbled-santanaraptor) - <script  src="js/game.js"></script> at end of body of index.html
// switch main.js for client.js 
// might have trouble again with game.load vs this.game.load etc.

// Add scene class stuff
// Add extend a sprite stuff

// var test1;
//let gameScene = new Phaser.Scene('Title');
